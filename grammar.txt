---PROGRAM---
program => start STATEMENT_LIST end
STATEMENT_LIST => EPSILON
STATEMENT_LIST => STATEMENT_IF STATEMENT_LIST
STATEMENT_LIST => STATEMENT_EXPRESSION; STATEMENT_LIST
STATEMENT_LIST => STATEMENT_WHILE STATEMENT_LIST
STATEMENT_LIST => STATEMENT_RETURN STATEMENT_LIST
STATEMENT_LIST => STATEMENT_EXIT;
STATEMENT_LIST => STATEMENT_FUNCTION


---STATEMENT IF---
STATEMENT_IF  => if(EXPRESSION){STATEMENT_LIST} STATEMENT_IF2
STATEMENT_IF2 => EPSILON
STATEMENT_IF2 => STATEMENT_IF3
STATEMENT_IF2 => elseif(EXPRESSION){STATEMENT_LIST} STATEMENT_IF2
STATEMENT_IF3 => else{STATEMENT_LIST}

---TERM_TYPE---
TERM_TYPE => int
TERM_TYPE => string
TERM_TYPE => bool
TERM_TYPE => float

---RETURN_TYPE---
RETURN_TYPE => void
RETURN_TYPE => int
RETURN_TYPE => string
RETURN_TYPE => bool //TODO nenÃ­ v lexeru
RETURN_TYPE => float

---STATEMENT_FUNCTION--
STATEMENT_FUNCTION => function IDENTIFIER(FUNCTION_PARAMETER_LIST):RETURN_TYPE{STATEMENT_LIST STATEMENT_RETURN}
FUNCTION_PARAMETER_LIST => TERM_TYPE IDENTIFIER FUNCTION_PARAMETER_LIST2
FUNCTION_PARAMETER_LIST2 => EPSILON
FUNCTION_PARAMETER_LIST2 => ,TERM_TYPE IDENTIFIER FUNCTION_PARAMETER_LIST2

--EXPRESSION_FUNCTION_CALL--
EXPRESSION_FUNCTION_CALL => IDENTIFIER(PARAMETER_LIST)
PARAMETER_LIST => STATEMENT_EXPRESSION PARAMETER_LIST2
PARAMETER_LIST2 => EPSILON
PARAMETER_LIST2 => ,STATEMENT_EXPRESSION PARAMETER_LIST2

--RETURN--
STATEMENT_RETURN => return STATEMENT_RETURN2
STATEMENT_RETURN2 => STATEMENT_EXPRESSION;
STATEMENT_RETURN2 => ;

--EXIT--
STATEMENT_EXIT => exit STATEMENT_EXIT2
STATEMENT_EXIT2 => STATEMENT_EXPRESSION;
STATEMENT_EXIT2 => ;



STATEMENT_EXPRESSION,
STATEMENT_LIST,
STATEMENT_EXIT,
STATEMENT_FUNCTION

EXPRESSION_CONSTANT,
EXPRESSION_VARIABLE,
EXPRESSION_FUNCTION_CALL,
EXPRESSION_BINARY_OPERATOR,
EXPRESSION_UNARY_OPERATOR